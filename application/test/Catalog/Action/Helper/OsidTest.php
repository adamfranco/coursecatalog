<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for AbstractCatalogController.
 * Generated by PHPUnit on 2009-06-11 at 09:36:05.
 */
class Catalog_Action_Helper_OsidTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    	$this->osidHelper = new Catalog_Action_Helper_Osid();
    	Zend_Controller_Action_HelperBroker::addHelper($this->osidHelper);
        $this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog/MCUG');
        $this->spring2009TermId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term/200920');
        $this->fall2009TermId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term/200990');
        $this->fall2008TermId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term/200890');
        
        $this->termLookup = $this->osidHelper->getCourseManager()->getTermLookupSessionForCatalog($this->mcugId);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * 
     */
    public function testGetCourseManager()
    {
        $this->assertType('osid_course_CourseManager', $this->osidHelper->getCourseManager());
    }

    /**
     * 
     */
    public function testGetRuntimeManager()
    {
        $this->assertType('osid_OsidRuntimeManager', $this->osidHelper->getRuntimeManager());
    }
    
    /**
     * 
     */
    public function testGetCurrentTermId()
    {
        $this->assertType('osid_id_Id', $this->osidHelper->getCurrentTermId($this->mcugId));
    }

    /**
     * 
     */
    public function testGetClosestTermId()
    {
        $testDate = new DateTime('2009-09-30');
        $terms = $this->termLookup->getTerms();
        $closestTermId = $this->osidHelper->getClosestTermId($terms, $testDate);
        $this->assertTrue($closestTermId->isEqual($this->fall2009TermId));
        
    }
    
    /**
     * 
     */
    public function testGetClosestNonOverlappingTermIdA()
    {
        $testDate = new DateTime('2009-08-15');
        $terms = $this->termLookup->getTerms();
        $closestTermId = $this->osidHelper->getClosestTermId($terms, $testDate);
        $this->assertTrue($closestTermId->isEqual($this->fall2009TermId));
        
    }
    
    /**
     * 
     */
    public function testGetClosestNonOverlappingTermIdB()
    {
        $testDate = new DateTime('2009-06-15');
        $terms = $this->termLookup->getTerms();
        $closestTermId = $this->osidHelper->getClosestTermId($terms, $testDate);
        $this->assertTrue($closestTermId->isEqual($this->spring2009TermId));
        
    }
    
    /**
     * 
     */
    public function testGetClosestTermIdBeyondRange()
    {
        $testDate = new DateTime('2020-01-01');
        $terms = $this->termLookup->getTerms();
        $closestTermId = $this->osidHelper->getClosestTermId($terms, $testDate);
        $this->assertTrue($closestTermId->isEqual($this->fall2009TermId));
        
    }
}
?>
