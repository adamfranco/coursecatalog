<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for AbstractCatalogController.
 * Generated by PHPUnit on 2009-06-11 at 09:36:05.
 */
class AbstractCatalogControllerTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * 
     */
    public function testInit()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testGetCourseManager()
    {
        $this->assertType('osid_course_CourseManager', AbstractCatalogController::getCourseManager());
    }

    /**
     * 
     */
    public function testGetRuntimeManager()
    {
        $this->assertType('osid_OsidRuntimeManager', AbstractCatalogController::getRuntimeManager());
    }

    /**
     * 
     */
    public function testGetOsidIdFromString()
    {
    	$id = new phpkit_id_Id('example.edu', 'urn', '123456789/abcd');
    	$idString = AbstractCatalogController::getStringFromOsidId($id);
    	
    	$newId = AbstractCatalogController::getOsidIdFromString($idString);
        $this->assertType('osid_id_Id', $newId);
        $this->assertTrue($id->isEqual($newId));
    }

    /**
     * 
     */
    public function testGetStringFromOsidId()
    {
    	$id = new phpkit_id_Id('example.edu', 'urn', '123456789/abcd');
    	$idString = AbstractCatalogController::getStringFromOsidId($id);
        $this->assertType('string', $idString);
        
        $newId = AbstractCatalogController::getOsidIdFromString($idString);
        $this->assertEquals($idString, AbstractCatalogController::getStringFromOsidId($newId));
    }

    /**
     * 
     */
    public function testTopicListAsArray()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testFilterTopicsByType()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testGetTimeString()
    {
        $this->assertEquals('00:00', AbstractCatalogController::getTimeString(0));
        $this->assertEquals('08:33', AbstractCatalogController::getTimeString(30780));
        $this->assertEquals('18:21', AbstractCatalogController::getTimeString(66060));
        $this->assertEquals('24:00', AbstractCatalogController::getTimeString(86400));   
    }

    /**
     * 
     */
    public function testGetCurrentTermId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testGetClosestTermId()
    {
    	
        $testDate = new DateTime('2009-09-30');
        
    }

    /**
     * 
     */
    public function testPreDispatch()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testPostDispatch()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
