<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for banner_course_CourseOfferingQuery.
 * Generated by PHPUnit on 2009-05-20 at 16:45:31.
 */
class banner_course_CourseOfferingQueryTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    banner_course_CourseOfferingQuery
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    	$this->wildcardStringMatchType = new phpkit_type_URNInetType("urn:inet:middlebury.edu:search:wildcard");
        $this->object = new banner_course_CourseOfferingQuery;
        
    	$this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog/MCUG');
	 	$this->manager = $this->sharedFixture['CourseManager'];
        $this->session = $this->manager->getCourseOfferingSearchSessionForCatalog($this->mcugId);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetWhereClause().
     */
    public function testGetWhereClause()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetParameters().
     */
    public function testGetParameters()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetStringMatchTypes().
     */
    public function testGetStringMatchTypes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSupportsStringMatchType().
     */
    public function testSupportsStringMatchType()
    {
    	$this->assertTrue($this->object->supportsStringMatchType($this->wildcardStringMatchType));
    	
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchKeyword().
     */
    public function testMatchKeyword()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchDisplayName().
     */
    public function testMatchDisplayName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchDescription().
     */
    public function testMatchDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyDescription().
     */
    public function testMatchAnyDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchGenusType().
     */
    public function testMatchGenusType()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchParentGenusType().
     */
    public function testMatchParentGenusType()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchRecordType().
     */
    public function testMatchRecordType()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHasRecordType().
     */
    public function testHasRecordType()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchTitle().
     */
    public function testMatchTitle()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyTitle().
     */
    public function testMatchAnyTitle()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchNumber()
    {
        $this->object->matchNumber('PHYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild1()
    {
        $this->object->matchNumber('*HYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%HYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild2()
    {
        $this->object->matchNumber('P*YS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('P%YS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild3()
    {
        $this->object->matchNumber('PHY*0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHY%', $params[0]);
        $this->assertEquals('%0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild4()
    {
        $this->object->matchNumber('PH*01A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PH%', $params[0]);
        $this->assertEquals('%01', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild5()
    {
        $this->object->matchNumber('PHYS0*01A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0%01', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild6()
    {
        $this->object->matchNumber('PHYS0201*-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201%', $params[1]);
        $this->assertEquals('F', $params[2]);
        $this->assertEquals('2008%', $params[3]);
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild7()
    {
        $this->object->matchNumber('PHYS0201A*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild8()
    {
        $this->object->matchNumber('PHYS0201A-*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild9()
    {
        $this->object->matchNumber('PHYS0201*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild10()
    {
        $this->object->matchNumber('PHYS0*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11()
    {
        $this->object->matchNumber('PHYS*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11a()
    {
        $this->object->matchNumber('CHEM*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(85, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11c()
    {
        $this->object->matchNumber('GEOL*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('GEOL%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(14, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11b()
    {
        $this->object->matchNumber('*H*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%H%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(93, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild12()
    {
        $this->object->matchNumber('*0*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%0%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild13()
    {
        $this->object->matchNumber('*0*2*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%0%2%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(22, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild14()
    {
        $this->object->matchNumber('*-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('F', $params[0]);
        $this->assertEquals('2008%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchAnyNumber()
    {
    	$this->object->matchAnyNumber(true);
        $this->assertEquals('(TRUE)', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
	}

    /**
     * @todo Implement testMatchCredits().
     */
    public function testMatchCredits()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyCredits().
     */
    public function testMatchAnyCredits()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchPrereqInfo().
     */
    public function testMatchPrereqInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyPrereqInfo().
     */
    public function testMatchAnyPrereqInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchCourseId().
     */
    public function testMatchCourseId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSupportsCourseQuery().
     */
    public function testSupportsCourseQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetCourseQuery().
     */
    public function testGetCourseQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchTermId().
     */
    public function testMatchTermId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSupportsTermQuery().
     */
    public function testSupportsTermQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetTermQuery().
     */
    public function testGetTermQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchLocationInfo().
     */
    public function testMatchLocationInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyLocationInfo().
     */
    public function testMatchAnyLocationInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchLocationId().
     */
    public function testMatchLocationId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSupportsLocationQuery().
     */
    public function testSupportsLocationQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetLocationQuery().
     */
    public function testGetLocationQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyLocation().
     */
    public function testMatchAnyLocation()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchScheduleInfo().
     */
    public function testMatchScheduleInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyScheduleInfo().
     */
    public function testMatchAnyScheduleInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchCalendarId().
     */
    public function testMatchCalendarId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSupportsCalendarQuery().
     */
    public function testSupportsCalendarQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetCalendarQuery().
     */
    public function testGetCalendarQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyCalendar().
     */
    public function testMatchAnyCalendar()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchLearningObjectiveId().
     */
    public function testMatchLearningObjectiveId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSupportsLearningObjectiveQuery().
     */
    public function testSupportsLearningObjectiveQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetLearningObjectiveQuery().
     */
    public function testGetLearningObjectiveQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyLearningObjective().
     */
    public function testMatchAnyLearningObjective()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchCourseCatalogId().
     */
    public function testMatchCourseCatalogId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSupportsCourseCatalogQuery().
     */
    public function testSupportsCourseCatalogQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetCourseCatalogQuery().
     */
    public function testGetCourseCatalogQuery()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchURL().
     */
    public function testMatchURL()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMatchAnyURL().
     */
    public function testMatchAnyURL()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetCourseOfferingQueryRecord().
     */
    public function testGetCourseOfferingQueryRecord()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
