<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for banner_course_CourseOfferingQuery.
 * Generated by PHPUnit on 2009-05-20 at 16:45:31.
 */
class banner_course_CourseOfferingQueryTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    banner_course_CourseOfferingQuery
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    	$this->wildcardStringMatchType = new phpkit_type_URNInetType("urn:inet:middlebury.edu:search:wildcard");
        
    	$this->mcugId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:catalog/MCUG');
	 	$this->manager = $this->sharedFixture['CourseManager'];
        $this->session = $this->manager->getCourseOfferingSearchSessionForCatalog($this->mcugId);
        $this->object = $this->session->getCourseOfferingQuery();
        
        $this->physId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course/PHYS0201');
        $this->chemId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:course/CHEM0104');
        $this->termId = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term/200890');
        $this->termId2 = new phpkit_id_URNInetId('urn:inet:middlebury.edu:term/200790');
		
		$this->instructorsType = new phpkit_type_URNInetType('urn:inet:middlebury.edu:record:instructors');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * 
     */
    public function testGetWhereClause()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testGetParameters()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testGetStringMatchTypes()
    {
        $types = $this->object->getStringMatchTypes();
        $this->assertType('osid_type_TypeList', $types);
        $this->assertEquals(1, $types->available());
        $this->assertTrue($this->wildcardStringMatchType->isEqual($types->getNextType()));
    }

    /**
     * 
     */
    public function testSupportsStringMatchType()
    {
    	$this->assertTrue($this->object->supportsStringMatchType($this->wildcardStringMatchType));
    }

    /**
     * 
     */
    public function testMatchKeyword()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchDisplayName()
    {
        $this->object->matchDisplayName('PHYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchAnyDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchGenusType()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType("urn:inet:osid.org:genera:none"), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(TRUE)', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchGenusTypeInverted()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType("urn:inet:osid.org:genera:none"), false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(NOT TRUE)', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(0, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchOtherGenusType()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType("urn:inet:osid.org:genera:stuff"), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(FALSE)', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(0, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchOtherGenusTypeInverted()
    {
        $this->object->matchGenusType(new phpkit_type_URNInetType("urn:inet:osid.org:genera:stuff"), false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(NOT FALSE)', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchParentGenusType()
    {
        $this->object->matchParentGenusType(new phpkit_type_URNInetType("urn:inet:osid.org:genera:none"), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(TRUE)', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchRecordType()
    {
        $this->object->matchRecordType($this->instructorsType, true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(TRUE)', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchOtherRecordType()
    {
        $this->object->matchRecordType(new phpkit_type_URNInetType("urn:inet:osid.org:record:other"), true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(FALSE)', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(0, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testHasRecordType()
    {
        $this->assertTrue($this->object->hasRecordType($this->instructorsType));
        $this->assertFalse($this->object->hasRecordType(new phpkit_type_URNInetType("urn:inet:osid.org:record:other")));
    }

    /**
     * 
     */
    public function testMatchTitle()
    {
        $this->object->matchTitle('Relativity And Quantum Physics', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('Relativity And Quantum Physics', $params[0]);
        $this->assertEquals('Relativity And Quantum Physics', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CRSE_TITLE LIKE(?) OR SCBCRSE_TITLE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchTitleWithWild()
    {
        $this->object->matchTitle('*Quantum*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%Quantum%', $params[0]);
        $this->assertEquals('%Quantum%', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CRSE_TITLE LIKE(?) OR SCBCRSE_TITLE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchTitleWithWildMixedCase()
    {
        $this->object->matchTitle('*qUAntum*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%qUAntum%', $params[0]);
        $this->assertEquals('%qUAntum%', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CRSE_TITLE LIKE(?) OR SCBCRSE_TITLE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchTitleWithWildAnd()
    {
        $this->object->matchTitle('*and*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%and%', $params[0]);
        $this->assertEquals('%and%', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CRSE_TITLE LIKE(?) OR SCBCRSE_TITLE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(22, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchLabTitle()
    {
        $this->object->matchTitle('*lab*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%lab%', $params[0]);
        $this->assertEquals('%lab%', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CRSE_TITLE LIKE(?) OR SCBCRSE_TITLE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(48, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchLabTitleCapital()
    {
        $this->object->matchTitle('*Lab*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%Lab%', $params[0]);
        $this->assertEquals('%Lab%', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CRSE_TITLE LIKE(?) OR SCBCRSE_TITLE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(48, $courseOfferings->available());
		
		while ($courseOfferings->hasNext()) {
			$this->assertGreaterThanOrEqual(1, preg_match('/lab/i', $courseOfferings->getNextCourseOffering()->getTitle()));
		}
    }

    /**
     * 
     */
    public function testMatchAnyTitle()
    {
        $this->object->matchAnyTitle(true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('((SSBSECT_CRSE_TITLE IS NOT NULL OR SCBCRSE_TITLE IS NOT NULL))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(107, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchAnyTitleInverted()
    {
        $this->object->matchAnyTitle(false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(NOT (SSBSECT_CRSE_TITLE IS NOT NULL OR SCBCRSE_TITLE IS NOT NULL))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(0, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchNumber()
    {
        $this->object->matchNumber('PHYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());
		
		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild1()
    {
        $this->object->matchNumber('*HYS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%HYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild2()
    {
        $this->object->matchNumber('P*YS0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('P%YS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild3()
    {
        $this->object->matchNumber('PHY*0201A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHY%', $params[0]);
        $this->assertEquals('%0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild4()
    {
        $this->object->matchNumber('PH*01A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PH%', $params[0]);
        $this->assertEquals('%01', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild5()
    {
        $this->object->matchNumber('PHYS0*01A-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0%01', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertEquals('F', $params[3]);
        $this->assertEquals('2008%', $params[4]);
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ? AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild6()
    {
        $this->object->matchNumber('PHYS0201*-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201%', $params[1]);
        $this->assertEquals('F', $params[2]);
        $this->assertEquals('2008%', $params[3]);
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(1, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild7()
    {
        $this->object->matchNumber('PHYS0201A*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild8()
    {
        $this->object->matchNumber('PHYS0201A-*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201', $params[1]);
        $this->assertEquals('A', $params[2]);
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?) AND SSBSECT_SEQ_NUMB = ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild9()
    {
        $this->object->matchNumber('PHYS0201*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0201%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild10()
    {
        $this->object->matchNumber('PHYS0*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS', $params[0]);
        $this->assertEquals('0%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?) AND SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11()
    {
        $this->object->matchNumber('PHYS*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('PHYS%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11a()
    {
        $this->object->matchNumber('CHEM*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(85, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11c()
    {
        $this->object->matchNumber('GEOL*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('GEOL%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(14, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild11b()
    {
        $this->object->matchNumber('*H*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%H%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(93, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild12()
    {
        $this->object->matchNumber('*0*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%0%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild13()
    {
        $this->object->matchNumber('*0*2*', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('%0%2%', $params[0]);
        $this->assertFalse(isset($params[1]));
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((SSBSECT_CRSE_NUMB LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(22, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchNumberWild14()
    {
        $this->object->matchNumber('*-F08', $this->wildcardStringMatchType, true);

        $params = $this->object->getParameters();
        $this->assertEquals('F', $params[0]);
        $this->assertEquals('2008%', $params[1]);
        $this->assertFalse(isset($params[2]));
        $this->assertFalse(isset($params[3]));
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('((term_display_label = ? AND SSBSECT_TERM_CODE LIKE(?)))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(8, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchAnyNumber()
    {
    	$this->object->matchAnyNumber(true);
        $this->assertEquals('(TRUE)', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
	}

    /**
     * 
     */
    public function testMatchCredits11()
    {
        $this->object->matchCredits(1, 1, true);

        $params = $this->object->getParameters();
        $this->assertEquals(1.0, $params[0]);
        $this->assertEquals(1.0, $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(27, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchCredits01()
    {
        $this->object->matchCredits(0, 1, true);

        $params = $this->object->getParameters();
        $this->assertEquals(0.0, $params[0]);
        $this->assertEquals(1.0, $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(107, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchCredits22()
    {
        $this->object->matchCredits(2.0, 2.0, true);

        $params = $this->object->getParameters();
        $this->assertEquals(2.0, $params[0]);
        $this->assertEquals(2.0, $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(0, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchCredits00()
    {
        $this->object->matchCredits(0.0, 0.0, true);

        $params = $this->object->getParameters();
        $this->assertEquals(0.0, $params[0]);
        $this->assertEquals(0.0, $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_CREDIT_HRS >= ? AND SSBSECT_CREDIT_HRS <= ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(80, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchAnyCredits()
    {
        $this->object->matchAnyCredits(true);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(SSBSECT_CREDIT_HRS > 0)', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(27, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchAnyCreditsInverted()
    {
        $this->object->matchAnyCredits(false);

        $params = $this->object->getParameters();
        $this->assertFalse(isset($params[0]));
        
        $this->assertEquals('(NOT SSBSECT_CREDIT_HRS > 0)', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
		$this->assertEquals(80, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testMatchPrereqInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchAnyPrereqInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchCourseId()
    {
        $this->object->matchCourseId($this->chemId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('CHEM', $params[0]);
        $this->assertEquals('0104', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('((SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(85, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testSupportsCourseQuery()
    {
        $this->assertFalse($this->object->supportsCourseQuery());
    }

    /**
     * @expectedException osid_UnimplementedException
     */
    public function testGetCourseQuery()
    {
        $this->object->getCourseQuery();
    }

    /**
     * 
     */
    public function testMatchTermId()
    {
        $this->object->matchTermId($this->termId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertFalse(isset($params[1]));
        
        $this->assertEquals('(SSBSECT_TERM_CODE = ?)', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(8, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchTwoTermIds()
    {
        $this->object->matchTermId($this->termId, true);
        $this->object->matchTermId($this->termId2, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertEquals('200790', $params[1]);
        $this->assertFalse(isset($params[2]));
        
        $this->assertEquals('(SSBSECT_TERM_CODE = ? OR SSBSECT_TERM_CODE = ?)', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(18, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchTwoTermIdsAndACourseId()
    {
        $this->object->matchTermId($this->termId, true);
        $this->object->matchTermId($this->termId2, true);
        $this->object->matchCourseId($this->chemId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertEquals('200790', $params[1]);
        $this->assertEquals('CHEM', $params[2]);
        $this->assertEquals('0104', $params[3]);
        $this->assertFalse(isset($params[4]));
        
        $this->assertEquals('(SSBSECT_TERM_CODE = ? OR SSBSECT_TERM_CODE = ?) AND ((SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(12, $courseOfferings->available());
    }
    
    /**
     * 
     */
    public function testMatchTwoTermIdsAndTwoCourseIds()
    {
        $this->object->matchTermId($this->termId, true);
        $this->object->matchTermId($this->termId2, true);
        $this->object->matchCourseId($this->chemId, true);
        $this->object->matchCourseId($this->physId, true);

        $params = $this->object->getParameters();
        $this->assertEquals('200890', $params[0]);
        $this->assertEquals('200790', $params[1]);
        $this->assertEquals('CHEM', $params[2]);
        $this->assertEquals('0104', $params[3]);
        $this->assertEquals('PHYS', $params[4]);
        $this->assertEquals('0201', $params[5]);
        $this->assertFalse(isset($params[6]));
        
        $this->assertEquals('(SSBSECT_TERM_CODE = ? OR SSBSECT_TERM_CODE = ?) AND ((SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?) OR (SSBSECT_SUBJ_CODE = ? AND SSBSECT_CRSE_NUMB = ?))', $this->object->getWhereClause());

		$courseOfferings = $this->session->getCourseOfferingsByQuery($this->object);
// 		print $courseOfferings->debug();
		$this->assertEquals(14, $courseOfferings->available());
    }

    /**
     * 
     */
    public function testSupportsTermQuery()
    {
        $this->assertFalse($this->object->supportsTermQuery());
    }

    /**
     * @expectedException osid_UnimplementedException
     */
    public function testGetTermQuery()
    {
        $this->object->getTermQuery();
    }

    /**
     * 
     */
    public function testMatchLocationInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchAnyLocationInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchLocationId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testSupportsLocationQuery()
    {
        $this->assertFalse($this->object->supportsLocationQuery());
    }

    /**
     * @expectedException osid_UnimplementedException
     */
    public function testGetLocationQuery()
    {
        $this->object->getLocationQuery();
    }

    /**
     * 
     */
    public function testMatchAnyLocation()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchScheduleInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchAnyScheduleInfo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchCalendarId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testSupportsCalendarQuery()
    {
        $this->assertFalse($this->object->supportsCalendarQuery());
    }

    /**
     * @expectedException osid_UnimplementedException
     */
    public function testGetCalendarQuery()
    {
        $this->object->getCalendarQuery();
    }

    /**
     * 
     */
    public function testMatchAnyCalendar()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchLearningObjectiveId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testSupportsLearningObjectiveQuery()
    {
         $this->assertFalse($this->object->supportsLearningObjectiveQuery());
    }

    /**
     * @expectedException osid_UnimplementedException
     */
    public function testGetLearningObjectiveQuery()
    {
        $this->object->getLearningObjectiveQuery();
    }

    /**
     * 
     */
    public function testMatchAnyLearningObjective()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchCourseCatalogId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testSupportsCourseCatalogQuery()
    {
        $this->assertFalse($this->object->supportsCourseCatalogQuery());
    }

    /**
     * @expectedException osid_UnimplementedException
     */
    public function testGetCourseCatalogQuery()
    {
        $this->object->getCourseCatalogQuery();
    }

    /**
     * 
     */
    public function testMatchURL()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testMatchAnyURL()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testGetCourseOfferingQueryRecord()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
